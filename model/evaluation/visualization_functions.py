# -*- coding: utf-8 -*-
"""visualizations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TjW2-vvSrN7qYlQLQ-c9vkRvp494X5Yv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math
import os


def visualize_reward_new(average_df, save_folder):
    ''' 
    Function to visualize average performance (measured by reward) across user types and models

    average_df: DataFrame with user types as index and model names as columns
    '''

    # Create the sub-folder if it doesn't exist
    os.makedirs(save_folder, exist_ok=True)

    # Extract model names automatically from the columns
    model_names = [col.split('_')[0] for col in average_df.columns]

    # Spider plots setup
    labels = model_names
    num_vars = len(labels)
    
    num_users = len(average_df.index)
    num_cols = 3  # Fixed number of columns
    num_rows = math.ceil(num_users / num_cols)  # Dynamically calculate rows
    
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(4 * num_cols, 4 * num_rows), subplot_kw=dict(polar=True))
    axes = axes.flatten()  # Flatten for easier iteration

    for i, user in enumerate(average_df.index):
        values = average_df.loc[user].tolist()
        values += values[:1]  # Close the radar chart

        angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
        angles += angles[:1]  # Close the radar chart

        ax = axes[i]  # Select the correct subplot
        ax.fill(angles, values, color='blue', alpha=0.25)
        ax.plot(angles, values, color='blue', linewidth=2)
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(labels)
        ax.set_title(f"Reward Comparison\n{user}", fontsize=12, pad=20)

    # Hide unused subplots if any
    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])  

    plt.tight_layout()

    # Save the plot to the specified sub-folder
    save_path = os.path.join(save_folder, "spider_reward.png")
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Plot saved to: {save_path}")

    plt.show()

    # Bar Chart
    fig, ax = plt.subplots(figsize=(10, 6))

    # Define bar width
    num_models = len(model_names)
    bar_width = min(0.8 / num_models, 0.15)

    x = np.arange(len(average_df.index))  # Bar positions for user types

    # Plot bars
    bars = []
    for i, col in enumerate(average_df.columns):
        short_label = col.split('_')[0]  # Extract shortened model name
        bars.append(ax.bar(x + i * bar_width, average_df[col], width=bar_width, label=short_label, edgecolor="black"))


    # Annotate max values with a star
    for i, user in enumerate(average_df.index):
        max_model = average_df.loc[user].idxmax()
        max_value = average_df.loc[user].max()
        max_col_idx = list(average_df.columns).index(max_model)

        # Get the x position of the max bar
        x_pos = x[i] + max_col_idx * bar_width + bar_width / 2 - 0.03

        # Add star marker
        ax.scatter(x_pos, max_value + 0.03, color="red", marker="*", s=150, zorder=3, label="Max" if i == 0 else "")

    ax.set_xticks(x)
    ax.set_xticklabels(average_df.index) 

    plt.title("Reward Comparison by Source and User Type")
    plt.ylabel("Reward Value")
    plt.xlabel("User Type")
    plt.legend(title="Model", bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(axis="y", linestyle="--", alpha=0.7)

    # Save the plot to the specified sub-folder
    save_path = os.path.join(save_folder, "bar_reward.png")
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Plot saved to: {save_path}")
    plt.show()




def violin_difficulty_multi(filtered_data_dict, save_folder):
    # Create the sub-folder if it doesn't exist
    os.makedirs(save_folder, exist_ok=True)

    model_names = list(filtered_data_dict.keys())
    data_list = list(filtered_data_dict.values())
    
    num_plots = len(data_list)  
    num_cols = 3  
    num_rows = math.ceil(num_plots / num_cols)

    fig, axes = plt.subplots(num_rows, num_cols, figsize=(6 * num_cols, 5 * num_rows), sharey=True)
    axes = axes.flatten()  

    for i, (model_name, data) in enumerate(filtered_data_dict.items()):
        sns.violinplot(x="Difficulty", y="UserType", data=data, inner="quartile", hue="UserType", legend=False, ax=axes[i])
        axes[i].set_title(f"Difficulty Distribution Per User Type - {model_name}")
        axes[i].set_ylabel("User Type")
        axes[i].set_xlabel("Difficulty: [0 = Easy, 1 = Medium, 2 = Hard]")
        axes[i].set_xlim(-0.5, 2.5)

    # Hide unused subplots if any
    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()

    # Save the plot to the specified sub-folder
    save_path = os.path.join(save_folder, "violin_difficulty.png")
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Plot saved to: {save_path}")

    plt.show()

# Function to generate violin plots for cumulative reward distribution
def violin_reward_multi(filtered_data_dict, question_number, save_folder):

    # Create the sub-folder if it doesn't exist
    os.makedirs(save_folder, exist_ok=True)
    
    filtered_data_list = {model: data[data['Question_Number'] == question_number] for model, data in filtered_data_dict.items()}

    num_plots = len(filtered_data_list)
    num_cols = 3  
    num_rows = math.ceil(num_plots / num_cols)

    fig, axes = plt.subplots(num_rows, num_cols, figsize=(6 * num_cols, 5 * num_rows), sharey=True)
    axes = axes.flatten()  

    for i, (model_name, data) in enumerate(filtered_data_list.items()):
        sns.violinplot(x="cumulative_reward", y="UserType", data=data, inner="quartile", hue="UserType", legend=False, ax=axes[i])
        axes[i].set_title(f"Reward Distribution - {model_name}")
        axes[i].set_xlabel("Cumulative Reward")
        axes[i].set_ylabel("User Type")

    # Hide unused subplots if any
    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()

    # Save the plot to the specified sub-folder
    save_path = os.path.join(save_folder, "violin_reward.png")
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"Plot saved to: {save_path}")

    plt.show()


